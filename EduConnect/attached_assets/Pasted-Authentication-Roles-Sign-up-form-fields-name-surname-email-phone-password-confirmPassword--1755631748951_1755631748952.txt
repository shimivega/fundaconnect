Authentication & Roles

Sign up form fields: name, surname, email, phone, password, confirmPassword, school, province, role (learner / teacher / ABET).

Learner must also select grade (1–12).

Password field includes toggle show/hide password.

Validation: password must match confirmPassword.

Store all users in MongoDB collection users.

Hidden Admin Login

Credentials: email=admin, password=admin123.

Admin role should not appear in signup form.

Admin login is only available if credentials match.

🧑‍🏫 Teacher Approval Flow

Teachers must be approved by admin before access is granted.

New teachers go into status: pending.

Admin dashboard: approve/reject teachers.

Once approved, teachers can:

Create classrooms (stored in classrooms collection).

Upload educational content (PDFs, videos, images, textbooks).

Contribute practice zone questions (per grade + subject).

Create timed tests that learners can write simultaneously.

Mark tests and assign scores.

Add other teachers as friends → private collab chat via Socket.IO.

👩‍🎓 Learner Features

Learners can:

Join classrooms.

Access practice zone quizzes.

Play games from the Game Zone.

Attempt timed tests created by teachers.

View results & progress dashboard.

📚 Content Upload

Teachers + Admin can upload:

PDFs

Videos (embed YouTube/Vimeo or upload MP4)

Images

Textbooks (stored + categorized by grade & subject).

📊 Practice Zone

API endpoint: /api/practice/:grade/:subject

Teachers can contribute questions (MCQs + essay prompts).

Learners fetch by grade/subject/language.

📡 Real-Time Features

Socket.IO Chat:

Teachers can add each other as friends.

Private messaging between approved teachers.

Study group chats for learners.

🗂️ Backend API Routes

POST /api/auth/signup → register new user

POST /api/auth/login → login with JWT

GET /api/admin/teachers → list pending teachers (admin only)

PATCH /api/admin/approve/:id → approve/reject teacher

POST /api/classrooms → teacher creates classroom

POST /api/uploads → upload PDFs/videos/images/textbooks

POST /api/practice/add → teacher contributes question

POST /api/tests/create → teacher creates timed test

POST /api/tests/submit → learner submits answers

GET /api/tests/results/:id → teacher views results

🖥️ Frontend Pages

/auth → Signup/Login with role + province select

/dashboard → learner dashboard (progress, games, practice, support)

/teacher-dashboard → teacher dashboard (classrooms, uploads, tests, chat)

/admin-dashboard → hidden route, approve/reject teachers, manage platform

/game-zone → 12 educational games

🎨 UI Features

Responsive dashboards (mobile-first).

Province select: all 9 South African provinces.

Grade select: Grades 1–12 (for learners).

Role select: Learner / Teacher / ABET.

Toggle password visibility (Eye/EyeOff icon).

Dark mode + theme toggle.

🛠️ Deployment

App should be deployable to: Vercel (frontend) + Render/Railway/Replit (backend).

Shared .env for secrets (Mongo URI, JWT_SECRET, etc.).

📌 Important:
Generate both frontend and backend code in a monorepo structure like this:

funda-app/
  frontend/  (Next.js + Tailwind + shadcn/ui)
  backend/   (Express + MongoDB + Socket.IO)
  shared/    (types, configs)


⚡ Now, build me this Funda-App with all the above features working end-to-end.